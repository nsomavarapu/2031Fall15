-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28F0;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A19;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping
           00A : 80AE;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 8090;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display batt voltage on LCD
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 4A28;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 4A25;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 4A25;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 120F;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 520F;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 4A26;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 0A19;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 2822;  -- 	JUMP   Main
           022 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           023 : 80E6;  -- 	CALL   UARTClear   ; empty the UART receive FIFO of any old data
           024 : 0A19;  -- 	LOAD   ZERO		   ; JUMP   Example1
           025 : 1A1A;  -- 	ADD    ONE
           026 : 116A;  -- 	STORE  AtanX
           027 : 116B;  -- 	STORE  AtanY
           028 : 8109;  -- 	CALL   Atan2
           029 : 0037;  -- DW 55
           02A : 0048;  -- DW 72
           02B : 0000;  -- DW 0
           02C : 0000;  -- Ptr1: DW 0
           02D : B829;  -- 	LOADI  Table1
           02E : 102C;  -- 	STORE  Ptr1 ; pointer to the table
           02F : 702C;  -- 	ILOAD  Ptr1  ; get table value
           030 : 120F;  -- 	STORE  Temp  ; keep first table value for later
           031 : 082C;  -- 	LOAD   Ptr1
           032 : 6801;  -- 	ADDI   1     ; increment the pointer
           033 : 102C;  -- 	STORE  Ptr1  ; don't forget to store the new pointer value
           034 : 702C;  -- 	ILOAD  Ptr1  ; get the second table value
           035 : 1A0F;  -- 	ADD    Temp  ; add the first table value
           036 : 120F;  -- 	STORE  Temp  ; save sum for later
           037 : 082C;  -- 	LOAD   Ptr1
           038 : 6801;  -- 	ADDI   1     ; increment the pointer (now at third value)
           039 : 102C;  -- 	STORE  Ptr1
           03A : 0A0F;  -- 	LOAD   Temp  ; get the sum back in AC
           03B : 782C;  -- 	ISTORE Ptr1  ; put the sum in memory at the third table entry
           03C : B829;  -- 	LOADI  Table1 ; get the table address fresh
           03D : 6802;  -- 	ADDI   2     ; increment address to result entry
           03E : 120F;  -- 	STORE  Temp  ; different variable to show that 'Ptr1' is nothing special
           03F : B800;  -- 	LOADI  0     ; clear the AC just to prove we're getting the table value
           040 : 720F;  -- 	ILOAD  Temp  ; get the table value (3rd entry)
           041 : 9806;  -- 	OUT    LCD   ; and display it for debugging purposes
           042 : BBEB;  -- 	LOADI  1003     ; LOADI can load numbers up to 1023
           043 : 1193;  -- 	STORE  m16sA    ; this is one input to the mult subroutine
           044 : BC05;  -- 	LOADI  -1019
           045 : 1194;  -- 	STORE  m16sB    ; this is the other number to multiply
           046 : 8170;  -- 	CALL   Mult16s  ; call this to perform the multiplication
           047 : 0998;  -- 	LOAD   mres16sH ; high word of the 32-bit result
           048 : 9804;  -- 	OUT    SSEG1
           049 : 0997;  -- 	LOAD   mres16sL ; low word of the 32-bit result
           04A : 9805;  -- 	OUT    SSEG2
           04B : BBEB;  -- 	LOADI  1003
           04C : 6003;  -- 	SHIFT  3
           04D : 694E;  -- 	ADDI   334      ; 1003*8+334 = 8358
           04E : 11CB;  -- 	STORE  d16sN    ; this is the numerator to the div subroutine
           04F : BFE3;  -- 	LOADI  -29
           050 : 11CC;  -- 	STORE  d16sD    ; this is the denominator
           051 : 8199;  -- 	CALL   Div16s   ; call this to perform the division
           052 : 09D1;  -- 	LOAD   dres16sQ ; quotient of division
           053 : 9801;  -- 	OUT    LEDs
           054 : 09D2;  -- 	LOAD   dres16sR ; remainder of division
           055 : 9807;  -- 	OUT    XLEDs
           056 : B81E;  -- 	LOADI  30       ; wait 3 seconds
           057 : 8089;  -- 	CALL   WaitAC
           058 : B800;  -- 	LOADI  0
           059 : 1079;  -- 	STORE  Tripped  ; used to indicate conditions in following code
           05A : 9807;  -- 	OUT    XLEDS
           05B : 9801;  -- 	OUT    LEDS
           05C : 9806;  -- 	OUT    LCD
           05D : 9804;  -- 	OUT    SSEG1
           05E : 9805;  -- 	OUT    SSEG2
           05F : 80FD;  -- 	CALL   StartLog    ; enable the interrupt-based position logging
           060 : 90C0;  -- 	IN     XPOS
           061 : 116A;  -- 	STORE  AtanX      ; input to atan subroutine
           062 : 120A;  -- 	STORE  L2X        ; input to distance estimation subroutine
           063 : 90C1;  -- 	IN     YPOS
           064 : 116B;  -- 	STORE  AtanY      ; input to atan subroutine
           065 : 120B;  -- 	STORE  L2Y        ; input to distance estimation subroutine
           066 : 8109;  -- 	CALL   Atan2      ; find the angle
           067 : 9804;  -- 	OUT    SSEG1
           068 : 81E0;  -- 	CALL   L2Estimate ; estimate the distance
           069 : 9805;  -- 	OUT    SSEG2
           06A : 2231;  -- 	SUB    TwoFeet
           06B : 386D;  -- 	JPOS   Over2Ft    ; if over 2ft, trip the indicator
           06C : 2860;  -- 	JUMP   E3Loop     ; repeat forever
           06D : 0879;  -- 	LOAD   Tripped
           06E : 3860;  -- 	JPOS   E3Loop     ; if already indicated, don't do it again
           06F : 087A;  -- 	LOAD   TripCount  ; this example passes an incrementing count
           070 : 80E9;  -- 	CALL   IndicateDest
           071 : B801;  -- 	LOADI  1
           072 : 1079;  -- 	STORE  Tripped    ; remember that already indicated this round
           073 : 087A;  -- 	LOAD   TripCount
           074 : 6801;  -- 	ADDI   1
           075 : 107A;  -- 	STORE  TripCount  ; increment the counter
           076 : 0A18;  -- 	LOAD   NegOne
           077 : 9801;  -- 	OUT    LEDS       ; display for debug 
           078 : 2860;  -- 	JUMP   E3Loop     ; repeat forever
           079 : 0000;  -- Tripped: DW 0
           07A : 0000;  -- TripCount: DW 0
           07B : 0A19;  -- 	LOAD   Zero        ; Stop everything.
           07C : 9883;  -- 	OUT    LVELCMD
           07D : 988B;  -- 	OUT    RVELCMD
           07E : 98B2;  -- 	OUT    SONAREN
           07F : 0883;  -- 	LOAD   DEAD        ; An indication that we are dead
           080 : 9805;  -- 	OUT    SSEG2
           081 : 8105;  -- 	CALL   StopLog     ; Disable position logging
           082 : 2882;  -- 	JUMP   Forever     ; Do this forever.
           083 : DEAD;  -- DEAD:      DW &HDEAD   ; Example of a "local variable"
           084 : 9802;  -- 	OUT    TIMER
           085 : 9002;  -- 	IN     TIMER
           086 : 6FF6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           087 : 3085;  -- 	JNEG   Wloop
           088 : 8800;  -- 	RETURN
           089 : 108F;  -- 	STORE  WaitTime
           08A : 9802;  -- 	OUT    Timer
           08B : 9002;  -- 	IN     Timer
           08C : 208F;  -- 	SUB    WaitTime
           08D : 308B;  -- 	JNEG   WACLoop
           08E : 8800;  -- 	RETURN
           08F : 0000;  -- 	WaitTime: DW 0     ; "local" variable.
           090 : 80A8;  -- 	CALL   GetBattLvl
           091 : 4090;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           092 : 223C;  -- 	SUB    MinBatt
           093 : 3096;  -- 	JNEG   DeadBatt
           094 : 1A3C;  -- 	ADD    MinBatt     ; get original value back
           095 : 8800;  -- 	RETURN
           096 : 0A1D;  -- 	LOAD   Four
           097 : 980A;  -- 	OUT    BEEP        ; start beep sound
           098 : 80A8;  -- 	CALL   GetBattLvl  ; get the battery level
           099 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           09A : 9805;  -- 	OUT    SSEG2
           09B : 9806;  -- 	OUT    LCD
           09C : 0A19;  -- 	LOAD   Zero
           09D : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           09E : 9801;  -- 	OUT    LEDS        ; all LEDs on
           09F : 9807;  -- 	OUT    XLEDS
           0A0 : 8084;  -- 	CALL   Wait1       ; 1 second
           0A1 : 0A19;  -- 	Load   Zero
           0A2 : 980A;  -- 	OUT    BEEP        ; stop beeping
           0A3 : 0A19;  -- 	LOAD   Zero
           0A4 : 9801;  -- 	OUT    LEDS        ; LEDs off
           0A5 : 9807;  -- 	OUT    XLEDS
           0A6 : 8084;  -- 	CALL   Wait1       ; 1 second
           0A7 : 2896;  -- 	JUMP   DeadBatt    ; repeat forever
           0A8 : 0A3E;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           0A9 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           0AA : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           0AB : 80B6;  -- 	CALL   BlockI2C    ; wait for it to finish
           0AC : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           0AD : 8800;  -- 	RETURN
           0AE : 80B6;  -- 	CALL   BlockI2C    ; wait for idle
           0AF : 0A3D;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           0B0 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           0B1 : 0A19;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           0B2 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           0B3 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           0B4 : 80B6;  -- 	CALL   BlockI2C    ; wait for it to finish
           0B5 : 8800;  -- 	RETURN
           0B6 : 0A19;  -- 	LOAD   Zero
           0B7 : 120F;  -- 	STORE  Temp        ; Used to check for timeout
           0B8 : 0A0F;  -- 	LOAD   Temp
           0B9 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           0BA : 120F;  -- 	STORE  Temp
           0BB : 40BF;  -- 	JZERO  I2CError    ; Timeout occurred; error
           0BC : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           0BD : 38B8;  -- 	JPOS   BI2CL       ; If not 0, try again
           0BE : 8800;  -- 	RETURN             ; Else return
           0BF : 0A19;  -- 	LOAD   Zero
           0C0 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           0C1 : 9804;  -- 	OUT    SSEG1
           0C2 : 9805;  -- 	OUT    SSEG2       ; display error message
           0C3 : 28BF;  -- 	JUMP   I2CError
           0C4 : 10D9;  -- 	STORE  UARTTemp
           0C5 : 6018;  -- 	SHIFT  -8
           0C6 : 6FE5;  -- 	ADDI   -27   ; escape character
           0C7 : 40CB;  -- 	JZERO  UEsc1
           0C8 : 681B;  -- 	ADDI   27
           0C9 : 9898;  -- 	OUT    UART_DAT
           0CA : 28CE;  -- 	JUMP   USend2
           0CB : 681B;  -- 	ADDI   27
           0CC : 9898;  -- 	OUT    UART_DAT
           0CD : 9898;  -- 	OUT    UART_DAT
           0CE : 08D9;  -- 	LOAD   UARTTemp
           0CF : 4A2C;  -- 	AND    LowByte
           0D0 : 6FE5;  -- 	ADDI   -27   ; escape character
           0D1 : 40D5;  -- 	JZERO  UEsc2
           0D2 : 681B;  -- 	ADDI   27
           0D3 : 9898;  -- 	OUT    UART_DAT
           0D4 : 8800;  -- 	RETURN
           0D5 : 681B;  -- 	ADDI   27
           0D6 : 9898;  -- 	OUT    UART_DAT
           0D7 : 9898;  -- 	OUT    UART_DAT
           0D8 : 8800;  -- 	RETURN
           0D9 : 0000;  -- 	UARTTemp: DW 0
           0DA : 08DF;  -- 	LOAD   NL
           0DB : 9898;  -- 	OUT    UART_DAT
           0DC : 6018;  -- 	SHIFT  -8
           0DD : 9898;  -- 	OUT    UART_DAT
           0DE : 8800;  -- 	RETURN
           0DF : 0A1B;  -- 	NL: DW &H0A1B
           0E0 : 08E5;  -- 	LOAD   NBSP
           0E1 : 9898;  -- 	OUT    UART_DAT
           0E2 : 6018;  -- 	SHIFT  -8
           0E3 : 9898;  -- 	OUT    UART_DAT
           0E4 : 8800;  -- 	RETURN
           0E5 : 201B;  -- 	NBSP: DW &H201B
           0E6 : 9098;  -- 	IN     UART_DAT
           0E7 : 30E6;  -- 	JNEG   UARTClear
           0E8 : 8800;  -- 	RETURN
           0E9 : 4A2D;  -- 	AND    LowNibl    ; keep only #s 0-15
           0EA : 10EE;  -- 	STORE  IDNumber
           0EB : B801;  -- 	LOADI  1
           0EC : 10EF;  -- 	STORE  IDFlag     ; set flag for indication
           0ED : 8800;  -- 	RETURN
           0EE : 0000;  -- 	IDNumber: DW 0
           0EF : 0000;  -- 	IDFlag: DW 0
           0F0 : 80DA;  -- 	CALL   UARTNL ; newline
           0F1 : 90C0;  -- 	IN     XPOS
           0F2 : 80C4;  -- 	CALL   UARTSend2
           0F3 : 90C1;  -- 	IN     YPOS
           0F4 : 80C4;  -- 	CALL   UARTSend2
           0F5 : 08EF;  -- 	LOAD   IDFlag ; check if user has request a destination indication
           0F6 : 38F8;  -- 	JPOS   CTIndicateDest ; if yes, do it; otherwise...
           0F7 : B000;  -- 	RETI   ; return from interrupt
           0F8 : 08EE;  -- 	LOAD   IDNumber
           0F9 : 80CF;  -- 	CALL   UARTSend1 ; send the indicated destination
           0FA : B800;  -- 	LOADI  0
           0FB : 10EF;  -- 	STORE  IDFlag
           0FC : B000;  -- 	RETI
           0FD : 80DA;  -- 	CALL   UARTNL      ; send a newline to separate data
           0FE : B800;  -- 	LOADI  0
           0FF : 10EF;  -- 	STORE  IDFlag      ; clear any pending flag
           100 : B832;  -- 	LOADI  50
           101 : 980C;  -- 	OUT    CTIMER      ; configure timer for 0.01*50=0.5s interrupts
           102 : A002;  -- 	CLI    &B0010      ; clear any pending interrupt from timer
           103 : A802;  -- 	SEI    &B0010      ; enable interrupt from timer (source 1)
           104 : 8800;  -- 	RETURN
           105 : A002;  -- 	CLI    &B0010      ; disable interrupt source 1 (timer)
           106 : B800;  -- 	LOADI  0
           107 : 980C;  -- 	OUT    CTIMER      ; reset configurable timer
           108 : 8800;  -- 	RETURN
           109 : 096B;  -- 	LOAD   AtanY
           10A : 81D3;  -- 	CALL   Abs          ; abs(y)
           10B : 116D;  -- 	STORE  AtanT
           10C : 096A;  -- 	LOAD   AtanX        ; abs(x)
           10D : 81D3;  -- 	CALL   Abs
           10E : 216D;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           10F : 311A;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           110 : 096A;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           111 : 3117;  -- 	JNEG   A2_R3
           112 : 812B;  -- 	CALL   A2_calc      ; Octants 1, 8
           113 : 3115;  -- 	JNEG   A2_R1n
           114 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           115 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           116 : 8800;  -- 	RETURN
           117 : 812B;  -- 	CALL   A2_calc      ; Octants 4, 5            
           118 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           119 : 8800;  -- 	RETURN
           11A : 096B;  -- 	LOAD   AtanY        ; Swap input arguments
           11B : 116D;  -- 	STORE  AtanT
           11C : 096A;  -- 	LOAD   AtanX
           11D : 116B;  -- 	STORE  AtanY
           11E : 096D;  -- 	LOAD   AtanT
           11F : 116A;  -- 	STORE  AtanX
           120 : 3926;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           121 : 812B;  -- 	CALL   A2_calc      ; else octants 6, 7
           122 : 5A18;  -- 	XOR    NegOne
           123 : 6801;  -- 	ADDI   1            ; negate the angle
           124 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           125 : 8800;  -- 	RETURN
           126 : 812B;  -- 	CALL   A2_calc      ; Octants 2, 3
           127 : 5A18;  -- 	XOR    NegOne
           128 : 6801;  -- 	ADDI   1            ; negate the angle
           129 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           12A : 8800;  -- 	RETURN
           12B : 096B;  -- 	LOAD   AtanY
           12C : 11CB;  -- 	STORE  d16sN        ; Y in numerator
           12D : 096A;  -- 	LOAD   AtanX
           12E : 11CC;  -- 	STORE  d16sD        ; X in denominator
           12F : 8157;  -- 	CALL   A2_div       ; divide
           130 : 09D1;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           131 : 116C;  -- 	STORE  AtanRatio
           132 : 1193;  -- 	STORE  m16sA
           133 : 1194;  -- 	STORE  m16sB
           134 : 814E;  -- 	CALL   A2_mult      ; X^2
           135 : 1193;  -- 	STORE  m16sA
           136 : 096E;  -- 	LOAD   A2c
           137 : 1194;  -- 	STORE  m16sB
           138 : 814E;  -- 	CALL   A2_mult
           139 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           13A : 11CC;  -- 	STORE  d16sD
           13B : 096C;  -- 	LOAD   AtanRatio
           13C : 11CB;  -- 	STORE  d16sN        ; Ratio in numerator
           13D : 8157;  -- 	CALL   A2_div       ; divide
           13E : 09D1;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           13F : 1193;  -- 	STORE  m16sA        ; <= result in radians
           140 : 096F;  -- 	LOAD   A2cd         ; degree conversion factor
           141 : 1194;  -- 	STORE  m16sB
           142 : 814E;  -- 	CALL   A2_mult      ; convert to degrees
           143 : 116D;  -- 	STORE  AtanT
           144 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           145 : 4A1A;  -- 	AND    One
           146 : 414B;  -- 	JZERO  A2_rdwn      ; round down
           147 : 096D;  -- 	LOAD   AtanT
           148 : 6018;  -- 	SHIFT  -8
           149 : 6801;  -- 	ADDI   1            ; round up
           14A : 8800;  -- 	RETURN
           14B : 096D;  -- 	LOAD   AtanT
           14C : 6018;  -- 	SHIFT  -8           ; round down
           14D : 8800;  -- 	RETURN
           14E : 8170;  -- 	CALL   Mult16s
           14F : 0998;  -- 	LOAD   mres16sH
           150 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           151 : 1198;  -- 	STORE  mres16sH
           152 : 0997;  -- 	LOAD   mres16sL
           153 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           154 : 4A2C;  -- 	AND    LowByte
           155 : 5198;  -- 	OR     mres16sH     ; combine high and low words of result
           156 : 8800;  -- 	RETURN
           157 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           158 : 116D;  -- 	STORE  AtanT
           159 : 096D;  -- 	LOAD   AtanT
           15A : 6FFF;  -- 	ADDI   -1
           15B : 395E;  -- 	JPOS   A2_DN        ; not done; continue shifting
           15C : 8199;  -- 	CALL   Div16s       ; do the standard division
           15D : 8800;  -- 	RETURN
           15E : 116D;  -- 	STORE  AtanT
           15F : 09CB;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           160 : 6001;  -- 	SHIFT  1
           161 : 59CB;  -- 	XOR    d16sN        ; if the sign changed,
           162 : 3166;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           163 : 59CB;  -- 	XOR    d16sN        ; get back shifted version
           164 : 11CB;  -- 	STORE  d16sN
           165 : 2959;  -- 	JUMP   A2_DL
           166 : 09CC;  -- 	LOAD   d16sD
           167 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           168 : 11CC;  -- 	STORE  d16sD
           169 : 2959;  -- 	JUMP   A2_DL
           16A : 0000;  -- AtanX:      DW 0
           16B : 0000;  -- AtanY:      DW 0
           16C : 0000;  -- AtanRatio:  DW 0        ; =y/x
           16D : 0000;  -- AtanT:      DW 0        ; temporary value
           16E : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           16F : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           170 : B800;  -- 	LOADI  0
           171 : 1195;  -- 	STORE  m16sc        ; clear carry
           172 : 1198;  -- 	STORE  mres16sH     ; clear result
           173 : B810;  -- 	LOADI  16           ; load 16 to counter
           174 : 1196;  -- 	STORE  mcnt16s      
           175 : 0995;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           176 : 417A;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           177 : 0998;  -- 	LOAD   mres16sH     ; if a carry, 
           178 : 1993;  -- 	ADD    m16sA        ;  add multiplicand to result H
           179 : 1198;  -- 	STORE  mres16sH
           17A : 0994;  -- 	LOAD   m16sB
           17B : 4A1A;  -- 	AND    One          ; check bit 0 of multiplier
           17C : 1195;  -- 	STORE  m16sc        ; save as next carry
           17D : 4181;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           17E : 0998;  -- 	LOAD   mres16sH     ; if bit 0 set,
           17F : 2193;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           180 : 1198;  -- 	STORE  mres16sH
           181 : 0994;  -- 	LOAD   m16sB
           182 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           183 : 4992;  -- 	AND    c7FFF        ; clear msb
           184 : 1194;  -- 	STORE  m16sB
           185 : 0998;  -- 	LOAD   mres16sH     ; load result H
           186 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           187 : 5194;  -- 	OR     m16sB
           188 : 1194;  -- 	STORE  m16sB        ; result L now includes carry out from H
           189 : 0998;  -- 	LOAD   mres16sH
           18A : 6011;  -- 	SHIFT  -1
           18B : 1198;  -- 	STORE  mres16sH     ; shift result H >>1
           18C : 0996;  -- 	LOAD   mcnt16s
           18D : 6FFF;  -- 	ADDI   -1           ; check counter
           18E : 3974;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           18F : 0994;  -- 	LOAD   m16sB
           190 : 1197;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           191 : 8800;  -- 	RETURN              ; Done
           192 : 7FFF;  -- c7FFF: DW &H7FFF
           193 : 0000;  -- m16sA: DW 0 ; multiplicand
           194 : 0000;  -- m16sB: DW 0 ; multipler
           195 : 0000;  -- m16sc: DW 0 ; carry
           196 : 0000;  -- mcnt16s: DW 0 ; counter
           197 : 0000;  -- mres16sL: DW 0 ; result low
           198 : 0000;  -- mres16sH: DW 0 ; result high
           199 : B800;  -- 	LOADI  0
           19A : 11D2;  -- 	STORE  dres16sR     ; clear remainder result
           19B : 11CF;  -- 	STORE  d16sC1       ; clear carry
           19C : 09CB;  -- 	LOAD   d16sN
           19D : 59CC;  -- 	XOR    d16sD
           19E : 11CD;  -- 	STORE  d16sS        ; sign determination = N XOR D
           19F : B811;  -- 	LOADI  17
           1A0 : 11CE;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1A1 : 09CC;  -- 	LOAD   d16sD
           1A2 : 81D3;  -- 	CALL   Abs          ; take absolute value of denominator
           1A3 : 11CC;  -- 	STORE  d16sD
           1A4 : 09CB;  -- 	LOAD   d16sN
           1A5 : 81D3;  -- 	CALL   Abs          ; take absolute value of numerator
           1A6 : 11CB;  -- 	STORE  d16sN
           1A7 : 09CB;  -- 	LOAD   d16sN
           1A8 : 601F;  -- 	SHIFT  -15          ; get msb
           1A9 : 4A1A;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1AA : 11D0;  -- 	STORE  d16sC2       ; store as carry
           1AB : 09CB;  -- 	LOAD   d16sN
           1AC : 6001;  -- 	SHIFT  1            ; shift <<1
           1AD : 51CF;  -- 	OR     d16sC1       ; with carry
           1AE : 11CB;  -- 	STORE  d16sN
           1AF : 09CE;  -- 	LOAD   d16sT
           1B0 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1B1 : 41C1;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1B2 : 11CE;  -- 	STORE  d16sT
           1B3 : 09D2;  -- 	LOAD   dres16sR
           1B4 : 6001;  -- 	SHIFT  1            ; shift remainder
           1B5 : 51D0;  -- 	OR     d16sC2       ; with carry from other shift
           1B6 : 21CC;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1B7 : 31BC;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1B8 : 11D2;  -- 	STORE  dres16sR
           1B9 : B801;  -- 	LOADI  1
           1BA : 11CF;  -- 	STORE  d16sC1       ; set carry
           1BB : 29A7;  -- 	JUMP   Div16s_loop
           1BC : 19CC;  -- 	ADD    d16sD        ; add denominator back in
           1BD : 11D2;  -- 	STORE  dres16sR
           1BE : B800;  -- 	LOADI  0
           1BF : 11CF;  -- 	STORE  d16sC1       ; clear carry
           1C0 : 29A7;  -- 	JUMP   Div16s_loop
           1C1 : 09CB;  -- 	LOAD   d16sN
           1C2 : 11D1;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1C3 : 09CD;  -- 	LOAD   d16sS        ; check the sign indicator
           1C4 : 31C6;  -- 	JNEG   Div16s_neg
           1C5 : 8800;  -- 	RETURN
           1C6 : 09D1;  -- 	LOAD   dres16sQ     ; need to negate the result
           1C7 : 5A18;  -- 	XOR    NegOne
           1C8 : 6801;  -- 	ADDI   1
           1C9 : 11D1;  -- 	STORE  dres16sQ
           1CA : 8800;  -- 	RETURN	
           1CB : 0000;  -- d16sN: DW 0 ; numerator
           1CC : 0000;  -- d16sD: DW 0 ; denominator
           1CD : 0000;  -- d16sS: DW 0 ; sign value
           1CE : 0000;  -- d16sT: DW 0 ; temp counter
           1CF : 0000;  -- d16sC1: DW 0 ; carry value
           1D0 : 0000;  -- d16sC2: DW 0 ; carry value
           1D1 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1D2 : 0000;  -- dres16sR: DW 0 ; remainder result
           1D3 : 39D6;  -- 	JPOS   Abs_r
           1D4 : 5A18;  -- 	XOR    NegOne       ; Flip all bits
           1D5 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1D6 : 8800;  -- 	RETURN
           1D7 : 31DC;  -- 	JNEG   Mod180n      ; handle negatives
           1D8 : 6F4C;  -- 	ADDI   -180
           1D9 : 39D8;  -- 	JPOS   Mod180p      ; subtract 180 until negative
           1DA : 68B4;  -- 	ADDI   180          ; go back positive
           1DB : 8800;  -- 	RETURN
           1DC : 68B4;  -- 	ADDI   180          ; add 180 until positive
           1DD : 31DC;  -- 	JNEG   Mod180n
           1DE : 6F4C;  -- 	ADDI   -180         ; go back negative
           1DF : 8800;  -- 	RETURN
           1E0 : 0A0A;  -- 	LOAD   L2X
           1E1 : 81D3;  -- 	CALL   Abs
           1E2 : 120C;  -- 	STORE  L2T1
           1E3 : 0A0B;  -- 	LOAD   L2Y
           1E4 : 81D3;  -- 	CALL   Abs
           1E5 : 220C;  -- 	SUB    L2T1
           1E6 : 3202;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1E7 : 1A0C;  -- 	ADD    L2T1
           1E8 : 1193;  -- 	STORE  m16sa
           1E9 : B8F6;  -- 	LOADI  246       ; max * 246
           1EA : 1194;  -- 	STORE  m16sB
           1EB : 8170;  -- 	CALL   Mult16s
           1EC : 0998;  -- 	LOAD   mres16sH
           1ED : 6008;  -- 	SHIFT  8
           1EE : 120D;  -- 	STORE  L2T2
           1EF : 0997;  -- 	LOAD   mres16sL
           1F0 : 6018;  -- 	SHIFT  -8        ; / 256
           1F1 : 4A2C;  -- 	AND    LowByte
           1F2 : 520D;  -- 	OR     L2T2
           1F3 : 120E;  -- 	STORE  L2T3
           1F4 : 0A0C;  -- 	LOAD   L2T1
           1F5 : 1193;  -- 	STORE  m16sa
           1F6 : B868;  -- 	LOADI  104       ; min * 104
           1F7 : 1194;  -- 	STORE  m16sB
           1F8 : 8170;  -- 	CALL   Mult16s
           1F9 : 0998;  -- 	LOAD   mres16sH
           1FA : 6008;  -- 	SHIFT  8
           1FB : 120D;  -- 	STORE  L2T2
           1FC : 0997;  -- 	LOAD   mres16sL
           1FD : 6018;  -- 	SHIFT  -8        ; / 256
           1FE : 4A2C;  -- 	AND    LowByte
           1FF : 520D;  -- 	OR     L2T2
           200 : 1A0E;  -- 	ADD    L2T3     ; sum
           201 : 8800;  -- 	RETURN
           202 : 1A0C;  -- 	ADD    L2T1
           203 : 120D;  -- 	STORE  L2T2
           204 : 0A0C;  -- 	LOAD   L2T1
           205 : 120E;  -- 	STORE  L2T3
           206 : 0A0D;  -- 	LOAD   L2T2
           207 : 120C;  -- 	STORE  L2T1
           208 : 0A0E;  -- 	LOAD   L2T3
           209 : 29E8;  -- 	JUMP   CalcDist
           20A : 0000;  -- L2X:  DW 0
           20B : 0000;  -- L2Y:  DW 0
           20C : 0000;  -- L2T1: DW 0
           20D : 0000;  -- L2T2: DW 0
           20E : 0000;  -- L2T3: DW 0
           20F : 0000;  -- Temp:  DW 0 ; "Temp" is not a great name, but can be useful
           210 : 0000;  -- Temp2: DW 0
           211 : 0000;  -- Temp3: DW 0
           212 : 0000;  -- CDX: DW 0      ; current desired X
           213 : 0000;  -- CDY: DW 0      ; current desired Y
           214 : 0000;  -- CDT: DW 0      ; current desired angle
           215 : 0000;  -- CX:  DW 0      ; sampled X
           216 : 0000;  -- CY:  DW 0      ; sampled Y
           217 : 0000;  -- CT:  DW 0      ; sampled theta
           218 : FFFF;  -- NegOne:   DW -1
           219 : 0000;  -- Zero:     DW 0
           21A : 0001;  -- One:      DW 1
           21B : 0002;  -- Two:      DW 2
           21C : 0003;  -- Three:    DW 3
           21D : 0004;  -- Four:     DW 4
           21E : 0005;  -- Five:     DW 5
           21F : 0006;  -- Six:      DW 6
           220 : 0007;  -- Seven:    DW 7
           221 : 0008;  -- Eight:    DW 8
           222 : 0009;  -- Nine:     DW 9
           223 : 000A;  -- Ten:      DW 10
           224 : 0001;  -- Mask0:    DW &B00000001
           225 : 0002;  -- Mask1:    DW &B00000010
           226 : 0004;  -- Mask2:    DW &B00000100
           227 : 0008;  -- Mask3:    DW &B00001000
           228 : 0010;  -- Mask4:    DW &B00010000
           229 : 0020;  -- Mask5:    DW &B00100000
           22A : 0040;  -- Mask6:    DW &B01000000
           22B : 0080;  -- Mask7:    DW &B10000000
           22C : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           22D : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           22E : 03B8;  -- OneMeter: DW 952       ; ~1m in 1.05mm units
           22F : 01DC;  -- HalfMeter: DW 476      ; ~0.5m in 1.05mm units
           230 : 0122;  -- OneFoot:  DW 290       ; ~1ft in 1.05mm robot units
           231 : 0245;  -- TwoFeet:  DW 581       ; ~2ft in 1.05mm units
           232 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           233 : 00B4;  -- Deg180:   DW 180       ; 180
           234 : 010E;  -- Deg270:   DW 270       ; 270
           235 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           236 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           237 : FF9C;  -- RSlow:    DW -100
           238 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           239 : FEA2;  -- RMid:     DW -350
           23A : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           23B : FE0C;  -- RFast:    DW -500
           23C : 0082;  -- MinBatt:  DW 130       ; 13.0V - minimum safe battery voltage
           23D : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           23E : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
